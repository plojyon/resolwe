name: Resolwe CI

on:
  push:
    branches:
      - master
      - arc-runners-devel # TODO: remove
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"

  pull_request:
  schedule:
    - cron: "30 2 * * *"

jobs:
  ecr_login:
    runs-on: ubuntu-latest
    outputs:
      ecr_password: ${{ steps.retrieve_password.outputs.ecr_password }}
    steps:
      - name: Set up AWS CLI
        uses: chrislennon/action-aws-cli@1.1
      - name: Retrieve ECR password and store it as a secret
        id: retrieve_password
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: echo "::set-output name=ecr_password::$(aws ecr get-login-password)"

  test:
    needs: ecr_login
    env:
      TOX_COMMAND: "python3.12 -m tox --skip-missing-interpreters false"
      DOCKER_HOST: unix:///run/docker/docker.sock

    runs-on: arc-runner
    # timeout-minutes: 30 # TODO: re-enable
    strategy:
      fail-fast: false
      matrix:
        include:
          - python: "3.10"
            toxenv: "py310"
          - python: "3.11"
            toxenv: "py311"
          - python: "3.11"
            toxenv: "linters"
          - python: "3.11"
            toxenv: "packaging"
          - python: "3.11"
            toxenv: "migrations"

    container:
      image: 342286153875.dkr.ecr.us-east-1.amazonaws.com/genialis/ci/arc-runner:latest
      env:
        DOCKER_HOST: ${{ env.DOCKER_HOST }}
        RESOLWE_REDIS_PORT: 6379
        RESOLWE_POSTGRESQL_HOST: postgres
        RESOLWE_POSTGRESQL_NAME: resolwe
        RESOLWE_POSTGRESQL_USER: resolwe
        RESOLWE_POSTGRESQL_PASS: resolwe
        RESOLWE_POSTGRESQL_PORT: 5432
        RESOLWE_COMMUNICATOR_IMAGE: "resolwe/com:testing"
      volumes:
        - /run/docker:/var/run/docker
        # Process executors must mount certain volumes, so the directories must be shared on the host.
        - /tmp:/tmp
        - /home/runner/_work:/home/runner/_work
      ports:
        # Listener ports must open to the docker host to be accessible to process containers.
        # Do not open too many ports, as this can take a really long time.
        - 60000-60500:60000-60500
      credentials:
        username: AWS
        password: ${{ needs.ecr_login.outputs.ecr_password }}

    services:
      postgres: 
        image: public.ecr.aws/docker/library/postgres:14
        env:
          POSTGRES_USER: resolwe
          POSTGRES_DB: resolwe
          POSTGRES_PASSWORD: resolwe
        ports: 
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: public.ecr.aws/docker/library/redis:7-alpine
        ports: 
          - 6379/tcp
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
  
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build communication container
        working-directory: ./resolwe/flow/docker_images
        run: docker build -f Dockerfile.communication -t $RESOLWE_COMMUNICATOR_IMAGE ../../

      # TODO: remove
      - name: Get stuck
        run: |
          if [ "${{ matrix.python }}" = "3.10" ]; then touch lock; fi
          while [ -f lock ]; do
            sleep 10
          done

      - name: Test
        run: |
          # This is the same directory as before, but the path must match
          # the one on the host, so new docker containers can mount files in it.
          cd /home/runner/_work/resolwe/resolwe
          # Make sure `python` refers to the tox environment's Python
          export PATH=`pwd`/.tox/${{ matrix.toxenv }}/bin:$PATH
          ${{ env.TOX_COMMAND }} -e ${{ matrix.toxenv }}

  build:
    runs-on: arc-runner
    needs: test
    if: startsWith(github.ref, 'refs/tags')

    steps:
      - uses: actions/checkout@v4

      - name: Install build
        run: python3.12 -m pip install --user build

      - name: Build a binary wheel and a source tarball
        run: python3.12 -m build --sdist --wheel --outdir dist/ .

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.pypi_password }}
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: .coverage
  